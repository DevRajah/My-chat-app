<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>my chat app</title>
    <script src="https://cdn.socket.io/4.7.3/socket.io.min.js" integrity="sha384-+miq58Ltmjm+SSP5g8Ok6dpMO/6R4n8xe/x1Yj0Bdb9kiEz25LTnWv/GZQTRQamg" crossorigin="anonymous"></script>


<link rel="stylesheet" href="../styles.css">
</head>
<body style="background: PINK;">
    <h1 style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 35px; color: RED;"></h1>
    <div style="display: flex; align-items: flex-end; justify-content:flex-start; padding-inline: 20px;">
    <input type="text" class="sendme" style=" background: PINK; width: 450px; height: 150px; border-radius: 10px; border: solid 2px rgb(128, 128, 128); padding-inline: 15px;">
    <button onclick="chatFunc()" style="width: 115px; height: 40px; border-radius: 50px; border: solid 1px bLUE; background: RED; color: white; font-size: 15px; margin-left: 20px;" >SEND CHAT</button>
    </div>
<!-- <h2 style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 20px; color: green; margin-left: 20px;"></h2> -->

<ul style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-size: 20px; color: green; margin-left: 20px;" id="messages"></ul>

    <script>
let userName;
do {
  userName = prompt("Enter your name");
  if (userName.length < 1 || userName == null) {
    alert("Please enter your name!");
  }
} while (userName.length < 1 || userName == null);
document.querySelector("h1").innerHTML=`Hello ${userName}! Welcome to my chat application`
const socket=io("http://localhost:4040")

// Display message history
socket.on('message history', function (history) {
      const messagesList = document.getElementById('messages');
      history.forEach(message => {
        const listItem = document.createElement('li');
        listItem.textContent = message;
        messagesList.appendChild(listItem);
      });
    });


    socket.on("message", (data) => {
    const messagesList = document.getElementById('messages');

      // Display other clients' messages in the ul element
      const listItem = document.createElement('li');
      listItem.textContent = data;
      messagesList.appendChild(listItem);
  });

const chatFunc=()=>{
const messageToBeSent=document.querySelector(".sendme").value
socket.emit("message","mesage from "+userName+":   "+messageToBeSent)


  // Append the message to the DOM immediately
  const messagesList = document.getElementById('messages');
  const listItem = document.createElement('li');
  listItem.textContent = "You: " + messageToBeSent;
  messagesList.appendChild(listItem);

}
    </script>
</body>
</html>







































<!-- <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My chat app</title>
    <script src="https://cdn.socket.io/4.7.3/socket.io.min.js"> </script>
</head>

<body>
    <h1></h1>
    <input type="text" class="sendMe">
    <button onclick="chatFunc() "> Send chat</button>
    <h2></h2>
    <script>
        // const userName = '';

        // Keep prompting until a valid name is entered
        // while (!userName.trim()) {
        //     userName = prompt('Please enter your name:');
        // }
        const userName = prompt("Enter your name")
        // if (userName.length < 1 || userName === null) {
        //     alert("Please enter your name")
        // }
        document.querySelector("h1").innerHTML = `Hello ${userName}, welcome to my chat application`


        const socket = io("http://localhost:4040")
        socket.on("message", (data) => {

            document.querySelector("h2").innerHTML = data
        })

        const chatFunc = () => {
            const messageToBeSent = document.querySelector(".sendMe").value
            socket.emit("message", "message from" + userName + ":" + " " + messageToBeSent)

            console.log(messageToBeSent)
        }
        // // Example in-memory storage using an array
        const chatHistory = [];

        // When a new message is received
        socket.on('chatMessage', (message) => {
            // Save the message to the chat history
            chatHistory.push(message);

            // Broadcast the message to all connected clients
            io.emit('chatMessage', message);
        });

        // When a new user connects
        socket.on('userConnected', () => {
            // Send the chat history to the newly connected user
            socket.emit('chatHistory', chatHistory);
        });

        // On the client side
        socket.on('chatHistory', (history) => {
            // Update the UI with the chat history
            displayChatHistory(history);
        });





    </script>
</body>

</html> -->